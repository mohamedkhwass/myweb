"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   companyAPI: () => (/* binding */ companyAPI),\n/* harmony export */   portfolioAPI: () => (/* binding */ portfolioAPI),\n/* harmony export */   productsAPI: () => (/* binding */ productsAPI),\n/* harmony export */   projectsAPI: () => (/* binding */ projectsAPI),\n/* harmony export */   servicesAPI: () => (/* binding */ servicesAPI),\n/* harmony export */   storageAPI: () => (/* binding */ storageAPI),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://yoveamzpdqepjgafqgjl.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlvdmVhbXpwZHFlcGpnYWZxZ2psIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg3MDY1NzQsImV4cCI6MjA2NDI4MjU3NH0.LwJvOykhXi_VSHmWG-OicUcgaj5uE8ytTlAWUgQpvVA\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// API Functions\nconst companyAPI = {\n    async getInfo () {\n        const { data, error } = await supabase.from('company_info').select('*').single();\n        if (error) {\n            console.error('Error fetching company info:', error);\n            return null;\n        }\n        return data;\n    },\n    async updateInfo (info) {\n        const { data, error } = await supabase.from('company_info').update(info).eq('id', 1).select().single();\n        if (error) {\n            console.error('Error updating company info:', error);\n            return null;\n        }\n        return data;\n    }\n};\n// Portfolio API\nconst portfolioAPI = {\n    async getInfo () {\n        const { data, error } = await supabase.from('personal_info').select('*').single();\n        if (error) {\n            console.error('Error fetching portfolio info:', error);\n            return null;\n        }\n        return data;\n    },\n    async updateInfo (info) {\n        const { data, error } = await supabase.from('personal_info').upsert(info).select().single();\n        if (error) {\n            console.error('Error updating portfolio info:', error);\n            return null;\n        }\n        return data;\n    }\n};\nconst productsAPI = {\n    async getAll () {\n        const { data, error } = await supabase.from('products').select('*').eq('is_active', true).order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching products:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async getFeatured () {\n        const { data, error } = await supabase.from('products').select('*').eq('is_active', true).eq('is_featured', true).order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching featured products:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async getById (id) {\n        const { data, error } = await supabase.from('products').select('*').eq('id', id).eq('is_active', true).single();\n        if (error) {\n            console.error('Error fetching product:', error);\n            return null;\n        }\n        return data;\n    },\n    async create (product) {\n        const { data, error } = await supabase.from('products').insert(product).select().single();\n        if (error) {\n            console.error('Error creating product:', error);\n            return null;\n        }\n        return data;\n    },\n    async update (id, product) {\n        const { data, error } = await supabase.from('products').update(product).eq('id', id).select().single();\n        if (error) {\n            console.error('Error updating product:', error);\n            return null;\n        }\n        return data;\n    },\n    async delete (id) {\n        const { error } = await supabase.from('products').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting product:', error);\n            return false;\n        }\n        return true;\n    }\n};\nconst servicesAPI = {\n    async getAll () {\n        const { data, error } = await supabase.from('services').select('*').eq('is_active', true).order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching services:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async getFeatured () {\n        const { data, error } = await supabase.from('services').select('*').eq('is_active', true).eq('is_featured', true).order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching featured services:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async create (service) {\n        const { data, error } = await supabase.from('services').insert(service).select().single();\n        if (error) {\n            console.error('Error creating service:', error);\n            return null;\n        }\n        return data;\n    },\n    async update (id, service) {\n        const { data, error } = await supabase.from('services').update(service).eq('id', id).select().single();\n        if (error) {\n            console.error('Error updating service:', error);\n            return null;\n        }\n        return data;\n    },\n    async delete (id) {\n        const { error } = await supabase.from('services').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting service:', error);\n            return false;\n        }\n        return true;\n    }\n};\n// Storage API for image uploads\nconst storageAPI = {\n    async uploadImage (file, path) {\n        try {\n            const fileExt = file.name.split('.').pop();\n            const fileName = \"\".concat(Math.random(), \".\").concat(fileExt);\n            const filePath = \"\".concat(path, \"/\").concat(fileName);\n            const { data, error } = await supabase.storage.from('images').upload(filePath, file);\n            if (error) {\n                console.error('Error uploading image:', error);\n                return null;\n            }\n            const { data: { publicUrl } } = supabase.storage.from('images').getPublicUrl(filePath);\n            return publicUrl;\n        } catch (error) {\n            console.error('Error uploading image:', error);\n            return null;\n        }\n    },\n    async deleteImage (url) {\n        try {\n            const path = url.split('/').slice(-2).join('/');\n            const { error } = await supabase.storage.from('images').remove([\n                path\n            ]);\n            if (error) {\n                console.error('Error deleting image:', error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error('Error deleting image:', error);\n            return false;\n        }\n    }\n};\n// Projects API (reused from portfolio)\nconst projectsAPI = {\n    async getAll () {\n        const { data, error } = await supabase.from('projects').select('*').order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching projects:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async getFeatured () {\n        const { data, error } = await supabase.from('projects').select('*').eq('featured', true).order('display_order', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching featured projects:', error);\n            return [];\n        }\n        return data || [];\n    },\n    async getById (id) {\n        const { data, error } = await supabase.from('projects').select('*').eq('id', id).single();\n        if (error) {\n            console.error('Error fetching project:', error);\n            return null;\n        }\n        return data;\n    },\n    async create (project) {\n        const { data, error } = await supabase.from('projects').insert(project).select().single();\n        if (error) {\n            console.error('Error creating project:', error);\n            return null;\n        }\n        return data;\n    },\n    async update (id, project) {\n        const { data, error } = await supabase.from('projects').update(project).eq('id', id).select().single();\n        if (error) {\n            console.error('Error updating project:', error);\n            return null;\n        }\n        return data;\n    },\n    async delete (id) {\n        const { error } = await supabase.from('projects').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting project:', error);\n            return false;\n        }\n        return true;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});